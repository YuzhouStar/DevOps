##记录一些shell脚本编写的关键点##

#shell中的set -e和set +e的区别
set -e：执行的时候如果返回值为非零，整个脚本立即退出
set +e：执行的时候如果返回值为非零，将会继续执行下面的脚本
set -e命令用法总结：
1、当命令返回值非零，立即退出脚本执行
2、作用范围只限于脚本执行的当前进程，不作用于其创建的子进程
3、另外，当想根据命令执行返回值输出对应log，最好不用set -e选项，而是通过exit命令来达到输出log并退出执行目的。

#$[]和$(())可以进行整数运算，bash shell $()并不可以计算
a=3;b=5;
echo $((a+b));
a=3;b=15;
echo $[a*b];
shell (())的用法：
将数学运算表达式放在(())之间，表达式可以有多个，用逗号分隔，最后一个表达式的值作为整个(())命令执行结果。
((b=a-15))：即将a-15的值赋值给变量c，使用变量时不用加$前缀，会自动解析变量名
c=$((a+b))：可以前面加$回去命令执行结果，赋值给c
((a>7 && b==c))：也可以进行逻辑运算
echo $((a+10))：进行输出要加$
((a=3+5,b=a+10))：多个表达式同时计算
#linux shell计算工具，bc更强大：
expr命令：expr 3 + 2
bc工具：echo 'scale=2; (2.777 - 1.4744)/1' | bc

#[]与[[]]
[]和test一样：命令行test expr 和[ expr ]效果一样
[是一条命令
[[是关键字，内置再shell中的一个命令，支持字符串模式匹配
使用[]时需要再变量外加双引号，与test方法完全相同
使用[[]]时，不能用-a或者-o对多个条件进行连接
使用[]时，用-a或者-o对多个条件进行连接，-a或-o必须再[]之内
使用[[]]时，用&&或者||对多个条件进行连接，&&或||必须再[]之外

#echo -e命令详解
echo可以显示不通字体颜色，echo -e可以处理特殊字符
echo -e "a\bdddd" //前面的a会被擦除
echo -e "a\adddd" //输出的同时会发出报警声
echo -e "a\ndddd" //自动换行

#shell中${var:-},${var:=},${var:+},${var:?},${var:}变量替换提取
${var}		变量，界定范围
${var:-word}		如果var为空或者未设定，返回word，var不变
${var:=word}		如果var为空或者未设定，返回word，且var=word
${var:+word}		如果var有值，返回word，var不变
${var:？word}		如果var为空或者未设定，返回word，并退出shell，word没有值则输出：parameter null ornot set，用于检测var是否被正常赋值
${var-word}		如果var未设定，返回word，如果var为空或者有值，返回var
${var:-num}		返回var中第num个字符到末尾的所有字符，正从左往右，负从右往左，有空格：${var: -2}，没有空格：${var:1-3}或${var:(-2)}
${var:num1:num2}		从var的第num1个未知开始，提取长度为num2的子串。num1是未知，num2是长度
${var/word1/word2}		将var中第一个匹配到的word1替换为word2
${var//word1/word2}		将var中所有word1替换为word2


#shell脚本从字符串中提想要的字符串
#!/bin/bash
test=China_jilin_Tsai_Signer.mp3
num1=${test#*_}
num2=${num1#*_}
surname=${num2%_*}
num4=${test##*_}
profession=${num4%.*}
echo $test
echo $num1
echo $num2
echo $surname
echo $num4
echo $profession
说明：
#*_：从左边开始，去掉第一个符号"_"左边的所有字符
%_*：从右边开始，去掉第一个符号"_"右边的所有字符
##*_：从右边开始，去掉第一个符号"_"左边的所有字符
%%_*：从左边开始，去掉第一个符号"_"右边的所有字符

#剔除linux文件末尾的M
sed -i 's/^M//g' test.sh
windows文件传到linux上时，可能末尾出现\r,\n,^M，linux上Ctrl+v会出现^M
